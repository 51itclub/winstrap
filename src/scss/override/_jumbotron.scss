// avoid repeating nesting for each breakpoint
@mixin set-bottom-jumbotron-content($bottom) {
	// heavy nesting for isolation to full-width image component
	> .container-wrap {
		> .container {
			> .row {
				> .jumbotron-content-wrap {
					> .jumbotron-content {
						bottom: $bottom;
					}
				}
			}
		}
	}
}

.jumbotron {
	position: relative;

	// set positioning of jumbotron image gradient overlay
	.jumbotron-background {
		&:before {
			content: '';
			position: absolute;
			top: 0;
			right: 0;
			bottom: 0;
			left: 0;
		}
	}

	// set height to 100% for layout issues
	> .container-wrap {
		position: absolute;
		width: 100%;
		height: 100%;

		> .container {
			height: 100%;

			> .row {
				height: 100%;

				> .jumbotron-content-wrap {
					@extend .col-xs-24;
					height: 100%;

					> .jumbotron-content {
						position: absolute;
						bottom: 60px;

						&.centered {
							text-align: center;
							width: 100%;
						}
					}
				}
			}
		}
	}
	// set text sizes
	.jumbotron-header,
	h1 {
		@include type-headline();
	}
	.jumbotron-subheader,
	p {
		@include type-title();
	}
	@media (max-width: $screen-lg-max) {
		.jumbotron-header,
		h1 {
			@include type-header();
		}
		.jumbotron-subheader,
		p {
			@include type-title();
		}
		@include set-bottom-jumbotron-content(30px);
	}
	@media (max-width: $screen-md-max) {
		.jumbotron-header,
		h1 {
			@include type-subheader();
		}
		.jumbotron-subheader,
		p {
			@include type-subtitle();
		}
		@include set-bottom-jumbotron-content(15px);
	}
	@media (max-width: $screen-sm-max) {
		.jumbotron-header,
		h1 {
			margin-bottom: 6px;
			@include type-title();
		}
		.jumbotron-subheader,
		p {
			margin-top: 0;
			@include type-body();
		}
	}
	@media (max-width: $screen-xs-max) {
		@include set-bottom-jumbotron-content(5px);
	}

	// vertical alignment for highlight bands
		> .container {
			height: 100%;

			> .row {
				height: 100%;
				display: flex;
				flex-direction: row;
				align-items: center;
			}
		}

	.jumbotron-background,
	.container-wrap {
		top: 0;
	}
	.jumbotron-background {
		position: relative;
		left: 0;
	}

	&.highlight-bar {
		.img-container,
		.jumbotron-content {
			padding: 28px 0;
		}
		h1 {
			margin-top: 0;
			margin-bottom: 24px;
		}
		p {
			margin-top: 0;
			margin-bottom: 28px;
		}
		img,
		video {
			max-width: 100%;
		}
		a {
			display: block;
			margin-bottom: 14px;
		}
		@media (max-width: $screen-md) {
			// allow columns at break point
			> .container {
			height: 100%;

				> .row {
					flex-direction: column;
				}
			}
			.img-container {
				padding-bottom: 0;
			}
		}

		/*------------------------------------------
		------------ COLORS ------------------------
		-------------------------------------------*/

		//
		// Jumbotron - highlight bar
		//
		background-color: $color-bg-light-vivid-low;

		button,
		.btn {
			@extend .btn-secondary.theme-on-img-light;

			&.btn-primary {
				@extend .btn-primary.theme-on-img-light;
			}
		}
		//
		// Jumbotron - theme on color
		// TODO - discuss btn-primary text color. Design spec is color matching
		// how do we want to achieve this?
		&.theme-on-color {
			color: $color-vivid-high-alt;
			background-color: inherit;
			button,
			.btn {
				@extend .btn-secondary.theme-on-img-dark;

				&.btn-primary{
					@extend .btn-primary.theme-on-img-dark;
				} 
			}
		}
		&.hyperlinks {
			// Have to be a little heavy handed here and repeat .btn rules to override default highlight bar btn use of Sass @extend
			button,
			.btn {
				@include button-variant($btn-default-color, $btn-default-bg, $btn-default-border);
		        &:hover {
		            background-color: $color-neutral-mid;
		        }
		        &:focus,
		        &:active,
		        &.active {
		            background-color: $color-neutral-high;
		            @include box-shadow(none);
		        }
		        &:disabled,
		        &.disabled {
		            color: $color-type-disabled;
		            background-color: $color-neutral-low;
		        } 
			}
			.btn.btn-primary {
				color: $color-type-primary-alt;
				background-color: $color-accent;
				border-color: transparent;
				&:hover {
				    color: $color-type-primary-alt;
				    background-color: darken($color-accent-vivid-high, 5%);
				    border-color: $color-neutral-high;
				}
				&:focus,
				&:active,
				&.active {
				    background-color: darken($color-accent-vivid-high, 10%);
				    border-color: transparent;
				    @include box-shadow(none);
				}
				&:disabled,
				&.disabled {
				    color: $color-type-disabled;
				    background-color: $color-accent-neutral-low;
				}
			}
		}
	}

	//
	// Jumbotron primary
	//
	&.theme-on-img-dark {
		color: $color-vivid-high-alt;

		.jumbotron-background {
			&:before {
				// colors for the image gradient overlay
				background: -webkit-linear-gradient(rgba($color-vivid-high, 0), rgba($color-vivid-high, 0.5) ); /* For Safari 5.1 to 6.0 */
				background: -o-linear-gradient(rgba($color-vivid-high, 0), rgba($color-vivid-high, 0.5) ); /* For Opera 11.1 to 12.0 */
				background: -moz-linear-gradient(rgba($color-vivid-high, 0), rgba($color-vivid-high, 0.5) ); /* For Firefox 3.6 to 15 */
				background: linear-gradient(rgba($color-vivid-high, 0), rgba($color-vivid-high, 0.5) ); /* Standard syntax */
			}
		}
	}
	&.theme-on-img-light {
		color: $color-vivid-high;

		.jumbotron-background {
			&:before {
				// colors for the image gradient overlay
				background: -webkit-linear-gradient(rgba($color-vivid-high-alt, 0), rgba($color-vivid-high-alt, 0.5) ); /* For Safari 5.1 to 6.0 */
				background: -o-linear-gradient(rgba($color-vivid-high-alt, 0), rgba($color-vivid-high-alt, 0.5) ); /* For Opera 11.1 to 12.0 */
				background: -moz-linear-gradient(rgba($color-vivid-high-alt, 0), rgba($color-vivid-high-alt, 0.5) ); /* For Firefox 3.6 to 15 */
				background: linear-gradient(rgba($color-vivid-high-alt, 0), rgba($color-vivid-high-alt, 0.5) ); /* Standard syntax */
			}
		}
	}
}