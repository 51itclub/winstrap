// Icon font
@font-face {
    font-family: "winjs-symbols";
    src: url("#{$icon-font-path}/winjs-symbols.eot");
    src: url("#{$icon-font-path}/winjs-symbols.eot#iefix") format("embedded-opentype"),
         url("#{$icon-font-path}/winjs-symbols.ttf") format("truetype");
}

@font-face {
    font-family: "Selawik";
    src: url("../fonts/selawk.eot");
    src: url("../fonts/selawk.eot#iefix") format("embedded-opentype"),
         url("../fonts/selawk.ttf") format("truetype");
}

@font-face {
    font-family: "Selawik Bold";
    src: url("../fonts/selawkb.eot");
    src: url("../fonts/selawkb.eot#iefix") format("embedded-opentype"),
         url("../fonts/selawkb.ttf") format("truetype");
}

@font-face {
    font-family: "Selawik Light";
    src: url("../fonts/selawkl.eot");
    src: url("../fonts/selawkl.eot#iefix") format("embedded-opentype"),
         url("../fonts/selawkl.ttf") format("truetype");
}

@font-face {
    font-family: "Selawik Semibold";
    src: url("../fonts/selawksb.eot");
    src: url("../fonts/selawksb.eot#iefix") format("embedded-opentype"),
         url("../fonts/selawksb.ttf") format("truetype");
}

@font-face {
    font-family: "Selawik Semilight";
    src: url("../fonts/selawksl.eot");
    src: url("../fonts/selawksl.eot#iefix") format("embedded-opentype"),
         url("../fonts/selawksl.ttf") format("truetype");
}

// Sets font-size and font-weight to the md breakpoint with optional arguments to set line-height, or to fully set all the proper responsive attributes.
@mixin set-type($font, $options) {
    $responsive: "false";
    $set-line-height: "false";

    @each $option in $options {
        @if ($option == "responsive") {
            $responsive: "true";
        }

        @if ($option == "set-line-height") {
            $set-line-height: "true";
        }
    }

    // set-type()
    font-size:                  map-deep-get($fonts, $font, "size-md");
    font-weight:                map-deep-get($fonts, $font, "weight-md");
    font-family:                map-deep-get($fonts, $font, "family-md");

    @if (#{$responsive} == "true") {

        // set-type(responsive)
        @media (max-width: $screen-sm-max) {
            font-size:          map-deep-get($fonts, $font, "size-sm");
            font-weight:        map-deep-get($fonts, $font, "weight-sm");
            font-family:        map-deep-get($fonts, $font, "family-sm");
        }

        @media (min-width: $screen-xxl-min) {
            font-size:          map-deep-get($fonts, $font, "size-xxl");
            font-weight:        map-deep-get($fonts, $font, "weight-xxl");
            font-family:        map-deep-get($fonts, $font, "family-xxl");
        }

        // set-type(responsive, set-line-height)
        @if (#{$set-line-height} == "true") {

            line-height:        (map-deep-get($fonts, $font, "line-height-md") / map-deep-get($fonts, $font, "size-md"));

            @media (max-width: $screen-sm-max) {
                line-height:    (map-deep-get($fonts, $font, "line-height-sm") / map-deep-get($fonts, $font, "size-sm"));
            }

            @media (min-width: $screen-xxl-min) {
                line-height:    (map-deep-get($fonts, $font, "line-height-xxl") / map-deep-get($fonts, $font, "size-xxl"));
            }
        }
    } @else {

        @if (#{$set-line-height} == "true") {

            // set-type(set-line-height)
            line-height:        (map-deep-get($fonts, $font, "line-height-md") / map-deep-get($fonts, $font, "size-md"));
        }
    }
}


// Responsive Typography mixins
//
// Optional arguments:
//
// set-line-height
// Sets line-height. If "responsive" is passed, line-height will be responsive. Otherwise, line-height is fixed to the md breakpoint.
//
// responsive
// Sets font size, weight, family to be responsive. Also sets responsive line-height if "set-line-height" is passed.
@mixin type-headline($options...) {
    letter-spacing: -0.01em;
    @include set-type(headline, $options);
}
@mixin type-header($options...) {
    letter-spacing: -0.01em;
    @include set-type(header, $options);
}
@mixin type-subheader($options...) {
    @include set-type(subheader, $options);
}
@mixin type-title($options...) {
    @include set-type(title, $options);
}
@mixin type-subtitle($options...) {
    @include set-type(subtitle, $options);
}
@mixin type-subtitle-alt($options...) {
    @include set-type(subtitle-alt, $options);
}
@mixin type-base($options...) {
    @include set-type(base, $options);
}
@mixin type-body($options...) {
    @include set-type(body, $options);
}
@mixin type-caption($options...) {
    @include set-type(caption, $options);
}
@mixin type-caption-alt($options...) {
    @include set-type(caption-alt, $options);
}

// Apply mixins to typography classes
.type-headline, .text-headline {
    @include type-headline();
}
h1, .h1, .type-header, .text-header {
    @include type-header();
}
h2, .h2, .type-subheader, .text-subheader {
    @include type-subheader();
}
h3, .h3, .type-title, .text-title {
    @include type-title();
}
.type-subtitle, .text-subtitle {
    @include type-subtitle();
}
h4, .h4, .type-subtitle-alt, .text-subtitle-alt {
    @include type-subtitle-alt();
}
h5, .h5, .type-base, .text-base {
    @include type-base();
}
p, .type-body, .text-body {
    @include type-body();
}
h6, .h6, .type-caption, .text-caption {
    @include type-caption();
}
.type-caption-alt, .text-caption-alt {
    @include type-caption-alt();
}
