// Icon font
@font-face {
    font-family: "winjs-symbols";
    src: url("#{$icon-font-path}/winjs-symbols.eot");
    src: url("#{$icon-font-path}/winjs-symbols.eot#iefix") format("embedded-opentype"),
         url("#{$icon-font-path}/winjs-symbols.ttf") format("truetype");
}

@font-face {
    font-family: "Selawik";
    src: url("../fonts/selawk.eot");
    src: url("../fonts/selawk.eot#iefix") format("embedded-opentype"),
         url("../fonts/selawk.ttf") format("truetype");
}

@font-face {
    font-family: "Selawik Bold";
    src: url("../fonts/selawkb.eot");
    src: url("../fonts/selawkb.eot#iefix") format("embedded-opentype"),
         url("../fonts/selawkb.ttf") format("truetype");
}

@font-face {
    font-family: "Selawik Light";
    src: url("../fonts/selawkl.eot");
    src: url("../fonts/selawkl.eot#iefix") format("embedded-opentype"),
         url("../fonts/selawkl.ttf") format("truetype");
}

@font-face {
    font-family: "Selawik Semibold";
    src: url("../fonts/selawksb.eot");
    src: url("../fonts/selawksb.eot#iefix") format("embedded-opentype"),
         url("../fonts/selawksb.ttf") format("truetype");
}

@font-face {
    font-family: "Selawik Semilight";
    src: url("../fonts/selawksl.eot");
    src: url("../fonts/selawksl.eot#iefix") format("embedded-opentype"),
         url("../fonts/selawksl.ttf") format("truetype");
}

// Produce the proper responsive type attributes with optional arguments for no line height and no responsive font size.
@mixin responsive-type($font, $options) {
    $responsive: "true";
    $set-line-height: "true";

    @each $option in $options {
        @if ($option == "no-responsive") {
            $responsive: "false";
        }

        @if ($option == "no-line-height") {
            $set-line-height: "false";
        }
    }

    font-family:            map-deep-get($win-fonts, $font, "font-family");
    font-weight:            map-deep-get($win-fonts, $font, "font-weight-xs");

    @if (#{$responsive} == "true") {
        font-size:          map-deep-get($win-fonts, $font, "size-xs");
    } @else {
        font-size:          map-deep-get($win-fonts, $font, "size-md");
    }

    @if (#{$set-line-height} == "true") {
        line-height:        (map-deep-get($win-fonts, $font, "line-height-xs") / map-deep-get($win-fonts, $font, "size-xs"));
    }

    @media (min-width: $screen-md-min) {
        @if (#{$responsive} == "true") {
            font-size:      map-deep-get($win-fonts, $font, "size-md");
        }

        @if (#{$set-line-height} == "true") {
            line-height:    (map-deep-get($win-fonts, $font, "line-height-md") / map-deep-get($win-fonts, $font, "size-md"));
        }
    }

    @media (min-width: $screen-xl-min) {
        @if (#{$responsive} == "true") {
            font-size:      map-deep-get($win-fonts, $font, "size-xl");
        }

        @if (#{$set-line-height} == "true") {
            line-height:    (map-deep-get($win-fonts, $font, "line-height-xl") / map-deep-get($win-fonts, $font, "size-xl"));
        }
    }

}

// Responsive Typography mixins
//
// Optional arguments:
// no-line-height   (does not set line height)
// no-responsive    (fixes the size to the md breakpoint)
@mixin win-type-headline($options...) {
    letter-spacing: -0.01em;
    @include responsive-type(headline, $options);
}
@mixin win-type-header($options...) {
    letter-spacing: -0.01em;
    @include responsive-type(header, $options);
}
@mixin win-type-subheader($options...) {
    @include responsive-type(subheader, $options);
}
@mixin win-type-title($options...) {
    @include responsive-type(title, $options);
}
@mixin win-type-subtitle($options...) {
    @include responsive-type(subtitle, $options);
}
@mixin win-type-subtitle-alt($options...) {
    @include responsive-type(subtitle-alt, $options);
}
@mixin win-type-base($options...) {
    @include responsive-type(base, $options);
}
@mixin win-type-body($options...) {
    @include responsive-type(body, $options);
}
@mixin win-type-caption($options...) {
    @include responsive-type(caption, $options);
}
@mixin win-type-caption-alt($options...) {
    @include responsive-type(caption-alt, $options);
}

// Apply mixins to typography classes
.win-type-headline, .text-headline {
    @include win-type-headline();
}
h1, .h1, .win-type-header, .text-header {
    @include win-type-header();
}
h2, .h2, .win-type-subheader, .text-subheader {
    @include win-type-subheader();
}
h3, .h3, .win-type-title, .text-title {
    @include win-type-title();
}
.win-type-subtitle, .text-subtitle {
    @include win-type-subtitle();
}
h4, .h4, .win-type-subtitle-alt, .text-subtitle-alt {
    @include win-type-subtitle-alt();
}
h5, .h5, .win-type-base, .text-base {
    @include win-type-base();
}
p, .win-type-body, .text-body {
    @include win-type-body();
}
h6, .h6, .win-type-caption, .text-caption {
    @include win-type-caption();
}
.win-type-caption-alt, .text-caption-alt {
    @include win-type-caption-alt();
}
